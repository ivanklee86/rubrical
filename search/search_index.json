{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rubrical","text":"<p>A CLI to encourage (\ud83d\ude05) people to update their dependencies!</p>"},{"location":"#raison-detre","title":"raison d'etre","text":"<pre><code>Scenario: A team publishes an update to a new library that needs to be adopted.\n            (New feature, breaking changes, security fixes, etc)\n  Given your company has a microservice architecture\n          (or &gt;3 repositories to update across &gt;2 teams )\n  Then you go to each team and beg/bargin/plead for them to update their packages\n</code></pre> <p>You can (should!) use tools like renovate to automate dependency updates.  But it's easy to lose track of updates especially with particularly technologies (hi JS/TS!) or busy teams.</p> <p><code>rubrical</code> breaks the cycle by putting a check inside your CI/CD pipelines. (Golden pipelines or shared workflows are highly recommended!)  Now teams have a tool to automatically (automagically!) communicated when a dependency needs to be upgraded!</p> <p>For more information, checkout the documentation!</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Set warning (notify users their dependency will be out of date soon) and block (exit with error code) levels.</li> <li>Supports different languages (Python, Go, Node.js, and Jsonnet) and package manager formats (e.g. pip, poetry).</li> <li>Post results to Github/GHE PRs.</li> </ul>"},{"location":"commands/","title":"CLI","text":"<p>Usage:</p> <pre><code>$ [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>configs</code></li> <li><code>grade</code>: A CLI to encourage (\ud83d\ude05) people to update...</li> </ul>"},{"location":"commands/#configs","title":"<code>configs</code>","text":"<p>Usage:</p> <pre><code>$ configs [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>jsonschema</code>: Prints configuration jsonschema.</li> <li><code>validate</code>: Validates rubrical config.</li> </ul>"},{"location":"commands/#configs-jsonschema","title":"<code>configs jsonschema</code>","text":"<p>Prints configuration jsonschema.</p> <p>Usage:</p> <pre><code>$ configs jsonschema [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"commands/#configs-validate","title":"<code>configs validate</code>","text":"<p>Validates rubrical config.</p> <p>Usage:</p> <pre><code>$ configs validate [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--config PATH</code>: Path to configuration  [default: rubrical.yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"commands/#grade","title":"<code>grade</code>","text":"<p>A CLI to encourage (\ud83d\ude05) people to update their dependencies!</p> <p>Usage:</p> <pre><code>$ grade [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--config PATH</code>: Path to configuration  [default: rubrical.yaml]</li> <li><code>--target PATH</code>: Path to configuration  [default: /workspaces/rubrical]</li> <li><code>/--no-block</code>: Don't fail if blocks found.  [default: True]</li> <li><code>--repository-name TEXT</code>: Repository name for reporting purposes.  [env var: RUBRICAL_REPOSITORY]</li> <li><code>--pr-id INTEGER</code>: PR ID for reporting purposes.  [env var: RUBRICAL_PR_ID; default: 0]</li> <li><code>--gh-access-token TEXT</code>: Github access token for reporting.  Presence will enable Github reporting.  [env var: RUBRICAL_GH_TOKEN]</li> <li><code>--gh-custom-url TEXT</code>: Github Enterprise custom url. e.g. https://github.custom.dev  [env var: RUBRICAL_GH_CUSTOM_URL]</li> <li><code>--debug / --no-debug</code>: Enable debug messages  [env var: RUBGRICAL_DEBUG; default: no-debug]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>Rubrical uses a YAML/JSON/TOml file is used to configure checks for your application.  By default, it will use the <code>rubrical.yaml</code> in your local directory.  You can specify your own file with the <code>--config</code> flag.</p> <pre><code>version: 1\npackage_managers:\n  - name: jsonnet\n    packages:\n      - name: \"xunleii/vector_jsonnet\" # Name of the dependency\n        block: v0.1.0  # If dependency is less than this, error.\n        warn: v0.1.2  # If dependency is less than this, warn.\n  - name: python\n    packages:\n      - name: Mopidy-Dirble\n        block: v1.2.1\n        warn: v1.2.2\n  - name: go\n    packages:\n      - name: github.com/adrg/xdg\n        block: v0.5.0\n        warn: v0.6.0\n  - name: nodejs\n    packages:\n      - name: react\n        block: v17.0.3\n        warn: v17.0.4\n</code></pre>"},{"location":"development/","title":"Developer Guide","text":""},{"location":"development/#development","title":"Development","text":"<ol> <li>Rubrical includes a <code>.devcontainer</code> to instantly* spin up a local or cloud development environment.</li> <li>Develoment tasks are managed through task.  Domain-specific tasks are stored in the <code>task/</code> folder.</li> <li>Automation for comment tasks can be seen by runing <code>task --list</code></li> </ol> <pre><code>* docker:build:            Builds Docker container for local testing.\n* docker:run:              Runs Rubrical in Docker container.\n* docker:shell:            Runs Rubrical in Docker container.\n* docs:gen:                Generates CLI docs\n* docs:release:            Publish docs to Github Pages.\n* docs:serve:              Run mkdocs server locally.\n* integration:block:       Run rubrical with block configuration.\n* integration:clean:       Run rubrical with clean configuration.\n* integration:mixed:       Run rubrical with mixed configuration.  (Used for docs)\n* integration:warn:        Run rubrical with warn configuration.\n* python:build:            Build artifact\n* python:fmt:              Run linting and fix issues.\n* python:install:          Install dependencies.\n* python:lint:             Run linting tasks.\n* python:publish:          Publish package to pypi\n* python:test:             Run unit and integration tests\n* python:test-cov:         Run unit and integration tests with coverage\n</code></pre>"},{"location":"development/#updating-docs","title":"Updating docs","text":"<ol> <li>Run <code>task docs:gen</code> to generate CLI documentation.</li> </ol>"},{"location":"development/#releasing","title":"Releasing","text":"<ol> <li>Create a tag on <code>main</code>.</li> </ol>"},{"location":"features_and_supported_formats/","title":"Featuers and Supported Formats","text":""},{"location":"features_and_supported_formats/#application","title":"Application","text":"<ul> <li>Users can configure warning (notifications) or block (error out) levels for pcakges.</li> <li><code>rubrical</code> will recursively search repository for dependency definition files (e.g. requirements.txt, package.json, etc) for languages with configured checks.</li> <li><code>rubrical</code> supports reporting results to command line and Github comments.  See reporting.</li> </ul>"},{"location":"features_and_supported_formats/#languages-and-package-managers","title":"Languages and Package Managers","text":"Language Package Managers Python <code>requirements.txt</code>, <code>pyproject.toml</code> (vanilla &amp; Poetry) Go <code>go.mod</code> Node.js <code>package.json</code> jsonnet <code>jsonnetfile.json</code>"},{"location":"installation_and_usage/","title":"Installation and Usage","text":""},{"location":"installation_and_usage/#installation","title":"Installation","text":""},{"location":"installation_and_usage/#package","title":"Package","text":"<p>Requirements</p> <ul> <li>Python 3.13</li> </ul> <p>Installation</p> <p>Rubrical can be installed from pypi.</p> <pre><code>pip install rubrical\n</code></pre>"},{"location":"installation_and_usage/#docker","title":"Docker","text":"<p>Rubrical is also available as a Docker container.  This is a handy for integrating with a CI/CD system of your choice!</p> <pre><code>docker pull ghcr.io/ivanklee86/rubrical:latest\ndocker run --rm -it --name rubrical \\\n  -v `pwd`/tests/files:/code ghcr.io/ivanklee86/rubrical:latest \\\n  --config /code/rubrical.yaml \\\n  --target /code\n</code></pre>"},{"location":"installation_and_usage/#usage","title":"Usage","text":"<ol> <li>Create a configuration file.  This can be commited to your code repositories but to get the most out of rubrical it's highly recommended to maintain a centralized configuration in a repository, gist, etc.</li> <li>In your code repository, run <code>rubrical grade --config /path/to/config</code></li> <li>???</li> <li>Profit!</li> </ol>"},{"location":"reporting/","title":"Reporting","text":""},{"location":"reporting/#terminal","title":"Terminal","text":"<p>Comes for free!  An example can be seen below:</p> <p></p>"},{"location":"reporting/#github","title":"Github","text":"<ol> <li>Create a Github access token with <code>Pull requests: Read and write</code> permissions to your repositories.</li> <li>Run rubrical with the <code>--gh-access-token</code>, <code>--repository-name</code>, and <code>--pr-id</code> flags.</li> </ol> <p><code>rubrical</code> will report status on comments to the PR if violations are found.  It's also a good citizen - if no violations are found, it will clean up after itself!</p> <p></p>"}]}